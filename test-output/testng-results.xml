<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" total="2" passed="1">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="133286" started-at="2020-07-03T07:59:13Z" finished-at="2020-07-03T08:01:26Z">
    <groups>
    </groups>
    <test name="test1" duration-ms="133286" started-at="2020-07-03T07:59:13Z" finished-at="2020-07-03T08:01:26Z">
      <class name="Scripts.Register">
        <test-method status="PASS" signature="before_suite()[pri:0, instance:Scripts.Register@3c756e4d]" name="before_suite" is-config="true" duration-ms="421" started-at="2020-07-03T13:29:13Z" finished-at="2020-07-03T13:29:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before_suite -->
        <test-method status="PASS" signature="before_method()[pri:0, instance:Scripts.Register@3c756e4d]" name="before_method" is-config="true" duration-ms="85704" started-at="2020-07-03T13:29:13Z" finished-at="2020-07-03T13:30:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before_method -->
        <test-method status="PASS" signature="RegisterValid()[pri:0, instance:Scripts.Register@3c756e4d]" name="RegisterValid" duration-ms="5909" started-at="2020-07-03T13:30:39Z" finished-at="2020-07-03T13:30:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RegisterValid -->
        <test-method status="PASS" signature="after_method(org.testng.ITestResult)[pri:0, instance:Scripts.Register@3c756e4d]" name="after_method" is-config="true" duration-ms="910" started-at="2020-07-03T13:30:45Z" finished-at="2020-07-03T13:30:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RegisterValid status=SUCCESS method=Register.RegisterValid()[pri:0, instance:Scripts.Register@3c756e4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after_method -->
        <test-method status="PASS" signature="before_method()[pri:0, instance:Scripts.Register@3c756e4d]" name="before_method" is-config="true" duration-ms="38010" started-at="2020-07-03T13:30:46Z" finished-at="2020-07-03T13:31:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before_method -->
        <test-method status="FAIL" signature="InvalidRegister()[pri:0, instance:Scripts.Register@3c756e4d]" name="InvalidRegister" duration-ms="9" started-at="2020-07-03T13:31:24Z" finished-at="2020-07-03T13:31:24Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [11] but found [10]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [11] but found [10]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertEquals(Assert.java:123)
	at org.testng.Assert.assertEquals(Assert.java:370)
	at org.testng.Assert.assertEquals(Assert.java:380)
	at Scripts.Register.InvalidRegister(Register.java:88)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InvalidRegister -->
        <test-method status="PASS" signature="after_method(org.testng.ITestResult)[pri:0, instance:Scripts.Register@3c756e4d]" name="after_method" is-config="true" duration-ms="2694" started-at="2020-07-03T13:31:24Z" finished-at="2020-07-03T13:31:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=InvalidRegister status=FAILURE method=Register.InvalidRegister()[pri:0, instance:Scripts.Register@3c756e4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after_method -->
        <test-method status="PASS" signature="after_suite()[pri:0, instance:Scripts.Register@3c756e4d]" name="after_suite" is-config="true" duration-ms="18694" started-at="2020-07-03T13:31:27Z" finished-at="2020-07-03T13:31:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after_suite -->
      </class> <!-- Scripts.Register -->
    </test> <!-- test1 -->
  </suite> <!-- Suite -->
</testng-results>
